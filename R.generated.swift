//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `blue`.
    static let blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue")
    /// Color `dark-blue`.
    static let darkBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "dark-blue")
    /// Color `lavender`.
    static let lavender = Rswift.ColorResource(bundle: R.hostingBundle, name: "lavender")
    /// Color `lightSkyblue`.
    static let lightSkyblue = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightSkyblue")
    /// Color `white`.
    static let white = Rswift.ColorResource(bundle: R.hostingBundle, name: "white")
    
    /// `UIColor(named: "blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "dark-blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkBlue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "lavender", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lavender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lavender, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "lightSkyblue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightSkyblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightSkyblue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `bible`.
    static let bible = Rswift.ImageResource(bundle: R.hostingBundle, name: "bible")
    /// Image `church_logo`.
    static let church_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "church_logo")
    /// Image `fire`.
    static let fire = Rswift.ImageResource(bundle: R.hostingBundle, name: "fire")
    /// Image `give`.
    static let give = Rswift.ImageResource(bundle: R.hostingBundle, name: "give")
    /// Image `livestream`.
    static let livestream = Rswift.ImageResource(bundle: R.hostingBundle, name: "livestream")
    /// Image `next`.
    static let next = Rswift.ImageResource(bundle: R.hostingBundle, name: "next")
    /// Image `profile-add`.
    static let profileAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-add")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `welcome`.
    static let welcome = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome")
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bible", bundle: ..., traitCollection: ...)`
    static func bible(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bible, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "church_logo", bundle: ..., traitCollection: ...)`
    static func church_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.church_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fire", bundle: ..., traitCollection: ...)`
    static func fire(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fire, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "give", bundle: ..., traitCollection: ...)`
    static func give(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.give, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "livestream", bundle: ..., traitCollection: ...)`
    static func livestream(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.livestream, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "next", bundle: ..., traitCollection: ...)`
    static func next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile-add", bundle: ..., traitCollection: ...)`
    static func profileAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "welcome", bundle: ..., traitCollection: ...)`
    static func welcome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `bible_cell`.
    static let bible_cell: Rswift.ReuseIdentifier<BibleCell> = Rswift.ReuseIdentifier(identifier: "bible_cell")
    /// Reuse identifier `previous_streams_cells`.
    static let previous_streams_cells: Rswift.ReuseIdentifier<PreviousStreamsCells> = Rswift.ReuseIdentifier(identifier: "previous_streams_cells")
    /// Reuse identifier `welcomeCollectionViewCell`.
    static let welcomeCollectionViewCell: Rswift.ReuseIdentifier<WelcomeCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "welcomeCollectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `BibleStudyViewController`, and contains static references to 1 segues.
    struct bibleStudyViewController {
      /// Segue identifier `showScriptures`.
      static let showScriptures: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BibleStudyViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showScriptures")
      
      /// Optionally returns a typed version of segue `showScriptures`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showScriptures(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BibleStudyViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.bibleStudyViewController.showScriptures, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `BibleStudy`.
    static let bibleStudy = _R.storyboard.bibleStudy()
    /// Storyboard `Giving`.
    static let giving = _R.storyboard.giving()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LiveStream`.
    static let liveStream = _R.storyboard.liveStream()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `More`.
    static let more = _R.storyboard.more()
    /// Storyboard `Welcome`.
    static let welcome = _R.storyboard.welcome()
    
    /// `UIStoryboard(name: "BibleStudy", bundle: ...)`
    static func bibleStudy(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bibleStudy)
    }
    
    /// `UIStoryboard(name: "Giving", bundle: ...)`
    static func giving(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.giving)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LiveStream", bundle: ...)`
    static func liveStream(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.liveStream)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "More", bundle: ...)`
    static func more(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.more)
    }
    
    /// `UIStoryboard(name: "Welcome", bundle: ...)`
    static func welcome(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.welcome)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try bibleStudy.validate()
      try giving.validate()
      try launchScreen.validate()
      try liveStream.validate()
      try main.validate()
      try more.validate()
      try welcome.validate()
    }
    
    struct bibleStudy: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "BibleStudy"
      
      static func validate() throws {
        if UIKit.UIImage(named: "bible", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bible' is used in storyboard 'BibleStudy', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in storyboard 'BibleStudy', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "lightSkyblue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'lightSkyblue' is used in storyboard 'BibleStudy', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white' is used in storyboard 'BibleStudy', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct giving: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Giving"
      
      static func validate() throws {
        if UIKit.UIImage(named: "give", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'give' is used in storyboard 'Giving', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "lightSkyblue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'lightSkyblue' is used in storyboard 'Giving', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white' is used in storyboard 'Giving', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "church_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'church_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct liveStream: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "LiveStream"
      
      static func validate() throws {
        if UIKit.UIImage(named: "livestream", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'livestream' is used in storyboard 'LiveStream', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in storyboard 'LiveStream', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "lavender", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'lavender' is used in storyboard 'LiveStream', but couldn't be loaded.") }
          if UIKit.UIColor(named: "lightSkyblue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'lightSkyblue' is used in storyboard 'LiveStream', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white' is used in storyboard 'LiveStream', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AnimatedViewController
      
      let animated = StoryboardViewControllerResource<AnimatedViewController>(identifier: "animated")
      let bundle = R.hostingBundle
      let main = StoryboardViewControllerResource<MainViewController>(identifier: "main")
      let name = "Main"
      
      func animated(_: Void = ()) -> AnimatedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: animated)
      }
      
      func main(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: main)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "church_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'church_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fire", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fire' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "lightSkyblue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'lightSkyblue' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().animated() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'animated' could not be loaded from storyboard 'Main' as 'AnimatedViewController'.") }
        if _R.storyboard.main().main() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'main' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct more: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "More"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "lightSkyblue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'lightSkyblue' is used in storyboard 'More', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white' is used in storyboard 'More', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct welcome: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Welcome"
      
      static func validate() throws {
        if UIKit.UIImage(named: "welcome", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'welcome' is used in storyboard 'Welcome', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue' is used in storyboard 'Welcome', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue-greenishBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue-greenishBlue' is used in storyboard 'Welcome', but couldn't be loaded.") }
          if UIKit.UIColor(named: "lavender", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'lavender' is used in storyboard 'Welcome', but couldn't be loaded.") }
          if UIKit.UIColor(named: "lightSkyblue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'lightSkyblue' is used in storyboard 'Welcome', but couldn't be loaded.") }
          if UIKit.UIColor(named: "white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'white' is used in storyboard 'Welcome', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
